import operator

import aiofiles
from aiogram.enums import ContentType
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import DialogManager, Dialog, Window, StartMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import SwitchTo, Group, Button, Checkbox, Select
from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const, Format
from loguru import logger

from telegram_bot.dialogs.states import Auth, Menu
from telegram_bot.services import GroupService
from telegram_bot.services.user import UserService
from telegram_bot.utils.dialog_constants import checkbox, next_button, admin_button
from telegram_bot.utils.validators import validate_full_name


async def on_full_name_enter(message: Message, message_input: MessageInput, dialog_manager: DialogManager):
    full_name = message.text.title()
    if not validate_full_name(full_name):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ</b> –§–ò–û –ø–æ –æ–±—Ä–∞–∑—Ü—É: <code>–ò–≤–∞–Ω–æ–≤ –ö–∏—Ä–∏–ª–ª –†–æ–º–∞–Ω–æ–≤–∏—á</code>")
        return

    async with aiofiles.open("data/students.txt", "r", encoding="utf-8") as students_list:
        students = (await students_list.read()).split("\n")
        if full_name not in students:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {full_name}")
            await dialog_manager.switch_to(state=Auth.FULLNAME_INVALID)
            return

    user_service: UserService = dialog_manager.middleware_data['user_service']
    await user_service.update_user_full_name(message.from_user.id, message.from_user.username, full_name)

    await dialog_manager.switch_to(state=Auth.PRIVACY_CONSENT_REQUIRE)


async def get_privacy_consent_checkbox_hint(dialog_manager: DialogManager, **kwargs):
    return {"checkbox_hint": "—Å–æ–≥–ª–∞—Å–Ω—ã" if dialog_manager.dialog_data.get("privacy_consent_checkbox") else "–ù–ï —Å–æ–≥–ª–∞—Å–Ω—ã"}


async def on_privacy_consent_checkbox(callback: CallbackQuery, target_checkbox: Checkbox,
                                      dialog_manager: DialogManager):
    dialog_manager.dialog_data["privacy_consent_checkbox"] = not target_checkbox.is_checked()


async def on_privacy_consent_next(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    checkbox_state = dialog_manager.dialog_data.get("privacy_consent_checkbox")
    if not checkbox_state:
        await dialog_manager.switch_to(state=Auth.PRIVACY_CONSENT_CANCELED)
    else:
        user_service: UserService = dialog_manager.middleware_data['user_service']
        await user_service.update_user_privacy_consent(callback.from_user.id, callback.from_user.username,
                                                       True)
        await dialog_manager.switch_to(state=Auth.GROUP_SELECT)


async def get_groups_data(dialog_manager: DialogManager, **kwargs):
    group_service: GroupService = dialog_manager.middleware_data['group_service']
    groups = [(group.name, group.id) for group in await group_service.get_groups()]
    selected_group_id = dialog_manager.dialog_data.get("selected_group_id")
    if selected_group_id:
        selected_group_name = (await group_service.get_group(selected_group_id)).name
    else:
        selected_group_name = "-"
    return {"group_buttons": groups, "selected_group": selected_group_name}


async def on_group_selected(callback: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    dialog_manager.dialog_data["selected_group_id"] = item_id


async def on_group_selection_done(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    selected_group_id = dialog_manager.dialog_data.get("selected_group_id")
    if not selected_group_id:
        return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É", show_alert=True)
    group_service: GroupService = dialog_manager.middleware_data['group_service']
    user_service: UserService = dialog_manager.middleware_data['user_service']
    selected_group = await group_service.get_group(selected_group_id)
    await user_service.update_user_group(callback.from_user.id, callback.from_user.username, selected_group)
    await dialog_manager.start(state=Menu.MAIN, mode=StartMode.RESET_STACK)


auth_dialog = Dialog(
    Window(
        Const("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ <b>–ü–Ω–æ–ø–±–æ—Ç</b>! üëã"),
        Const("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û."),
        Const("\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω–æ–≤ –ö–∏—Ä–∏–ª–ª –†–æ–º–∞–Ω–æ–≤–∏—á</code>"),
        Const("–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏! ü§ì "),
        MessageInput(on_full_name_enter),
        state=Auth.FULLNAME_INPUT
    ),
    Window(
        Const("ü§î –•–º–º, –∫–∞–∂–µ—Ç—Å—è, –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ."),
        Const("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –±–µ–∑ –æ—à–∏–±–æ–∫."),
        Const("–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ "
              "(–∫–Ω–æ–ø–∫–∞ <b>üÜò–ü–æ–º–æ—â—å</b>)."),
        Group(
            SwitchTo(id="repeat_fullname_input", text=Const("üîÑ–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥"), state=Auth.FULLNAME_INPUT),
            admin_button,
            width=2
        ),
        state=Auth.FULLNAME_INVALID
    ),
    Window(
        StaticMedia(path="data/–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.pdf", type=ContentType.DOCUMENT),
        Const("üîí –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."),
        Const("‚úÖ –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–°–æ–≥–ª–∞—Å–µ–Ω', –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ") +
        Const("–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."),
        Format("–°–µ–π—á–∞—Å –≤—ã <b>{checkbox_hint}</b> —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."),
        checkbox(Const("–°–æ–≥–ª–∞—Å–µ–Ω"), Const("–°–æ–≥–ª–∞—Å–µ–Ω"), "privacy_consent_checkbox",
                 on_click=on_privacy_consent_checkbox),
        Button(next_button.text, id="privacy_consent_next", on_click=on_privacy_consent_next),
        state=Auth.PRIVACY_CONSENT_REQUIRE,
        getter=get_privacy_consent_checkbox_hint
    ),
    Window(
        Const("–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."),
        Const("–ë–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É. üòì"),
        Const("–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
        SwitchTo(id="repeat_privacy_consent", text=Const("üîÑ–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä"), state=Auth.PRIVACY_CONSENT_REQUIRE),
        admin_button,
        state=Auth.PRIVACY_CONSENT_CANCELED
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å! üß∑"),
        Format("–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: <b>{selected_group}</b>"),
        Group(Select(
            Format("{item[0]}"),
            id="groups_select",
            item_id_getter=operator.itemgetter(1),
            items="group_buttons",
            on_click=on_group_selected
        ), id="groups_divider", width=3),
        Button(Const("–ó–∞–≤–µ—Ä—à–∏—Ç—å"), id="group_select_done", on_click=on_group_selection_done),
        state=Auth.GROUP_SELECT,
        getter=get_groups_data
    )
)
