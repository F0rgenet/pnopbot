from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, Dialog, Window, StartMode
from aiogram_dialog.widgets.kbd import SwitchTo, Group, Row, Start, Button
from aiogram_dialog.widgets.text import Const, Format

from telegram_bot.database import User, StudentGroup
from telegram_bot.dialogs.states import Tasks, Menu, Settings, Auth
from telegram_bot.filters.auth import is_verified, is_not_verified
from telegram_bot.services import UserService
from telegram_bot.utils.dialog_constants import home_button, back_button


async def get_profile_data(dialog_manager: DialogManager, **kwargs):
    user: User = dialog_manager.middleware_data["user"]
    user_service: UserService = dialog_manager.middleware_data["user_service"]

    await user_service.update_user_stats(user.id)

    user_rank_text = f"{user.rank}" if user.rank else "-"
    group: StudentGroup = user.group

    completed_tasks = len(await user_service.get_completed_tasks(user.id, False))
    correct_answers = len(await user_service.get_completed_tasks(user.id, True))

    if not group:
        group_name = "-"
    else:
        group_name = group.name

    return {
        "full_name": user.full_name,
        "group": group_name,
        "level": user.level,
        "current_xp": user.xp,
        "next_level_xp": user.level * 100,
        "score": user.total_points,
        "leaderboard_position": user_rank_text,
        "completed_tasks": completed_tasks,
        "correct_answers": correct_answers,
        "average_answer_time": 0
    }


async def get_leaderboard_data(dialog_manager: DialogManager, **kwargs):
    user_service: UserService = dialog_manager.middleware_data["user_service"]
    users = await user_service.get_all_users()
    result = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤\n"
    table = []
    for user in users:
        table.append(f"{user.full_name} {user.total_points}")
    return {"leaderboard": result + "\n".join(table)}


async def auth_clicked(cq: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.start(state=Auth.FULLNAME_INPUT, mode=StartMode.RESET_STACK)


menu_dialog = Dialog(
    Window(
        Const("–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Microsoft Office? –í—ã–±–∏—Ä–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ!\n"
              "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üëá\n"
              "üöÄ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n"
              "üë§ –ü—Ä–æ—Ñ–∏–ª—å: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤.\n"
              "üèÜ –†–µ–π—Ç–∏–Ω–≥: —É–∑–Ω–∞–π—Ç–µ, –∫—Ç–æ –≤ —Ç–æ–ø–µ, –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n"
              "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è: –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n",
              when=is_verified),
        Group(
            Start(
                Const("üöÄ–†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è"),
                id="solve_tasks_button",
                state=Tasks.CATEGORY_SELECT,
            ),
            Row(
                SwitchTo(
                    Const("üë§–ü—Ä–æ—Ñ–∏–ª—å"),
                    id="profile_button",
                    state=Menu.PROFILE
                ),
                SwitchTo(
                    Const("üèÜ–†–µ–π—Ç–∏–Ω–≥"),
                    id="leaderboard_button",
                    state=Menu.LEADERBOARD
                ),
                Start(
                    Const("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                    id="settings_button",
                    state=Settings.MAIN
                )
            ),

            when=is_verified,
        ),
        Button(Const("üîì–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"), id="auth_button", when=is_not_verified, on_click=auth_clicked),
        state=Menu.MAIN,
    ),

    Window(
        Const("<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>"),
        Format("–§–ò–û: {full_name}"),
        Format("–ì—Ä—É–ø–ø–∞: {group}"),

        Const("\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b>"),
        Format("üèÜ –£—Ä–æ–≤–µ–Ω—å: <code>{level}</code> (<code>{current_xp}</code>/<code>{next_level_xp}</code> XP)"),
        Format("‚≠ê –ë–∞–ª–ª—ã: <code>{score}</code>"),
        Format("ü•á –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: <code>{leaderboard_position}</code>"),
        Const("\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>"),
        Format("üìù –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <code>{completed_tasks}</code>"),
        Format("üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <code>{correct_answers}</code>"),
        Format("‚è≥ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <code>{average_answer_time}</code> —Å–µ–∫."),
        Const("\n<b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>"),
        Format("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∫–æ–Ω–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\nü•á –ó–Ω–∞—Ç–æ–∫ Word, üöÄ –ë—ã—Å—Ç—Ä—ã–π —É–º"),
        SwitchTo(text=Const("üóÇÔ∏è–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"), id="answer_history",
                 state=Menu.ANSWERS_HISTORY),
        home_button,
        getter=get_profile_data,
        state=Menu.PROFILE
    ),

    Window(
        Const("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞..."),
        back_button,
        state=Menu.ANSWERS_HISTORY
    ),

    Window(
        Const("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:"),
        Format("{leaderboard}"),
        home_button,
        getter=get_leaderboard_data,
        state=Menu.LEADERBOARD
    )
)
